#version 330 core

uniform sampler2D DIFFUSE00;
uniform sampler2D SPECULAR00;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;
out vec4 FragColor;

uniform vec4 AmbientColor;
uniform float AmbientStrength;

struct PointLight
{
    int flash;
    vec3 lightPos;
    vec4 lightColor;
    float k1,k2;
    float cutOff;
    float cutWidth;
    vec3 lightDirection;
};
uniform int numPointLights;
uniform float DiffuseStrength;
uniform PointLight pointLights[100];
vec4 getDiffuseColor(int num);

uniform vec3 eyePos;
uniform float SpecularStrength;
vec4 getSpecularColor(int num);

uniform bool select = false;
uniform vec4 selectId;

void main()
{
    vec4 Ambient = AmbientStrength * AmbientColor;
    vec4 ObjectAmbientColor = texture(DIFFUSE00, TexCoords);
    vec4 Diffuse = DiffuseStrength * getDiffuseColor(numPointLights);
    vec4 ObjectDiffuseColor = texture(DIFFUSE00, TexCoords);
    vec4 Specular = SpecularStrength * getSpecularColor(numPointLights);
    vec4 ObjectSpecularColor = texture(SPECULAR00, TexCoords);
    if(!select)
    {
        FragColor = ObjectAmbientColor * Ambient + ObjectDiffuseColor * Diffuse + ObjectSpecularColor * Specular;
    }
    else
    {
        FragColor = selectId;
    }
}

vec4 getDiffuseColor(int num)
{
    if(num > 100)
    {
        return vec4(1.0);
    }
    vec4 result;
    for(int i = 0; i < num; i++)
    {
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(pointLights[i].lightPos - FragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        float distance = length(pointLights[i].lightPos - FragPos);
        float attenuation = 1.0 / (pointLights[i].k1  * distance + pointLights[i].k2 * distance * distance + 1.0);

        if(pointLights[i].flash != 1)
        {
            result += attenuation * diff * pointLights[i].lightColor;
        }
        else
        {
            float theta = dot(lightDir, normalize(-pointLights[i].lightDirection));
            if(theta > pointLights[i].cutOff)
            {
                float intensity = clamp((theta - pointLights[i].cutOff) / pointLights[i].cutWidth, 0.0, 1.0);
                result += intensity * attenuation * diff * pointLights[i].lightColor;
            }
        }
    }
    return result;
}

vec4 getSpecularColor(int num)
{
    if(num > 100)
    {
        return vec4(1.0);
    }
    vec4 result;
    for(int i = 0; i < num; i++)
    {
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(pointLights[i].lightPos - FragPos);
        vec3 viewDir = normalize(eyePos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
        float distance = length(pointLights[i].lightPos - FragPos);
        float attenuation = 1.0 / (pointLights[i].k1  * distance + pointLights[i].k2 * distance * distance + 1.0);

        if(pointLights[i].flash != 1)
        {
            result += attenuation * spec * pointLights[i].lightColor;
        }
        else
        {
            float theta = dot(lightDir, normalize(-pointLights[i].lightDirection));
            if(theta > pointLights[i].cutOff)
            {
                float intensity = clamp((theta - pointLights[i].cutOff) / pointLights[i].cutWidth, 0.0, 1.0);
                result += intensity * attenuation * spec * pointLights[i].lightColor;
            }
        }
    }
    return result;
}
